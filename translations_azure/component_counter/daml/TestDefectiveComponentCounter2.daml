module TestDefectiveComponentCounter2 where

import DefectiveComponentCounter
import Daml.Script

{- 
  1. A manufacturer creates a DefectiveCounter contract in the Create state with an initial count of defective components.
  2. The manufacturer successfully exercises `ComputeTotal`, transitioning the contract to the ComputeTotal state.
  3. The test ensures that only the correct party can execute state transitions and verifies the correct contract behavior.
  4. The test ensures that the manufacturer can't compute the total again
-}

test2 : Script ()
test2 = script do
  manufacturer <- allocateParty "Manufacturer"
  random <- allocateParty "Random"
  
  -- Step 1: Create the initial DefectiveCounter contract in the "Create" state
  created <- submit manufacturer do
    createCmd DefectiveCounter with
      manufacturer = manufacturer
      defectiveComponents = 10
      state = "Create"

  -- Step 2: Compute the total, transitioning to the "ComputeTotal" state
  computed <- submit manufacturer do
    exerciseCmd created ComputeTotal

  --Make sure the manufacturer can't compute the total again
  submitMustFail manufacturer do
    exerciseCmd computed ComputeTotal
  
  debug computed
