module TestDigitalLocker where

import Daml.Script
import DigitalLocker

testDigitalLocker = script do
  -- ðŸŽ­ Allocate parties
  owner <- allocateParty "Owner"
  bankAgent <- allocateParty "BankAgent"
  thirdParty1 <- allocateParty "ThirdParty1"
  thirdParty2 <- allocateParty "ThirdParty2"

  -- Step 1: Owner creates the DigitalLocker (Requested state)
  locker <- submit owner do
    createCmd DigitalLocker with
      owner = owner
      bankAgent = bankAgent
      thirdParties = [thirdParty1, thirdParty2]
      currentAuthorizedUser = None
      lockerStatus = "Created"
      image = None
      lockerFriendlyName = "My Secure Locker"
      expirationDate = None
      lockerIdentifier = None
      intendedPurpose = None
      rejectionReason = None
      thirdPartyRequestor = None
      state = Requested

  -- Make sure that third parties and owner cannot begin review process
  submitMustFail thirdParty1 do
    exerciseCmd locker BeginReviewProcess

  submitMustFail owner do
    exerciseCmd locker BeginReviewProcess

  -- Step 2: BankAgent begins review process (Requested â†’ DocumentReview)
  lockerDocReview <- submit bankAgent do
    exerciseCmd locker BeginReviewProcess

  -- Make sure that unauthorized users cannot upload documents
  submitMustFail thirdParty1 do
    exerciseCmd lockerDocReview UploadDocuments with
      identifier = "Locker123"
      img = "Some Image Data"
  
  submitMustFail owner do
    exerciseCmd lockerDocReview UploadDocuments with
      identifier = "Locker123"
      img = "Some Image Data"

  -- Step 3: BankAgent uploads documents (DocumentReview â†’ AvailableToShare)
  lockerAvailable <- submit bankAgent do
    exerciseCmd lockerDocReview UploadDocuments with
      identifier = "Locker123"
      img = "Some Image Data"

  -- Step 4: ThirdParty1 requests access (AvailableToShare â†’ SharingRequestPending)
  lockerPending <- submit thirdParty1 do
    exerciseCmd lockerAvailable RequestLockerAccess with
      requestor = thirdParty1
      purpose = "For Legal Verification"

  --Make sure that unauthorized users cannot accept nor reject sharing requests
  submitMustFail thirdParty1 do
    exerciseCmd lockerPending AcceptSharingRequest

  submitMustFail thirdParty2 do
    exerciseCmd lockerPending AcceptSharingRequest

  submitMustFail thirdParty2 do
    exerciseCmd lockerPending RejectSharingRequest

  submitMustFail thirdParty1 do
    exerciseCmd lockerPending RejectSharingRequest

  --Make sure that another user cannot request access
  submitMustFail thirdParty2 do
    exerciseCmd lockerPending RequestLockerAccess with
      requestor = thirdParty2
      purpose = "For Verification"

  -- Step 5: Owner rejects the request (SharingRequestPending â†’ AvailableToShare)
  lockerReverted <- submit owner do
    exerciseCmd lockerPending RejectSharingRequest

  -- Step 6: ThirdParty2 requests access (AvailableToShare â†’ SharingRequestPending)
  lockerPending2 <- submit thirdParty2 do
    exerciseCmd lockerReverted RequestLockerAccess with
      requestor = thirdParty2
      purpose = "For Verification"

  -- Step 7: Owner accepts request (SharingRequestPending â†’ SharingWithThirdParty)
  lockerShared <- submit owner do
    exerciseCmd lockerPending2 AcceptSharingRequest

  -- Ensure unauthorized users **CANNOT** release access
  submitMustFail thirdParty1 do
    exerciseCmd lockerShared ReleaseLockerAccess

  -- Step 8: ThirdParty2 releases access (SharingWithThirdParty â†’ AvailableToShare)
  lockerReleased <- submit thirdParty2 do
    exerciseCmd lockerShared ReleaseLockerAccess

  -- Give access again to thirdParty2 (AvailableToShare â†’ SharingWithThirdParty)
  lockerShared2 <- submit owner do
    exerciseCmd lockerReleased ShareWithThirdParty with
      recipient = thirdParty2
      expDate = "2022-12-31"
      purpose = "For Verification"
  -- Step 9: Owner manually revokes access (SharingWithThirdParty â†’ AvailableToShare)
  lockerRevoked <- submit owner do
    exerciseCmd lockerShared2 RevokeAccessFromThirdParty

  -- Make sure that unauthorized users cannot terminate the locker
  submitMustFail thirdParty2 do
    exerciseCmd lockerRevoked Terminate
  
  submitMustFail thirdParty1 do
    exerciseCmd lockerRevoked Terminate

  submitMustFail owner do
    exerciseCmd lockerRevoked Terminate
  -- Step 10: BankAgent terminates the locker (Any State â†’ Terminated)
  lockerTerminated <- submit bankAgent do
    exerciseCmd lockerRevoked Terminate

  debug lockerTerminated
