module ZeroTokenBank where

import Daml.Script
import DA.Assert (assert)

--"properties": {
-- "dep-inc-snd-bal": "after a successful `deposit(amount)`, the balance entry of `msg.sender` is increased by `amount`.",
-- "wd-dec-snd-bal": "after a successful `withdraw(amount)`, the balance entry of `msg.sender` is decreased by `amount`.",
-- "bal-inc-onlyif-dep": "the only way to increase the balance entry of a user `a` is by calling `deposit` with `msg.sender = a`.",
-- "bal-dec-onlyif-wd": "the only way to decrease the balance entry of a user `a` is by calling `withdraw` with `msg.sender = a`.",
-- "bal-nonneg": "every balance entry is always non-negative.",
-- "always-bal-inc": "any user can always increase their balance.",
-- "bal-sum-dep-wd": "for every user `a`, their balance entry is equal to the sum of all `amount`s in successful `deposit(amount)` with `msg.sender = a` minus those in successful `withdraw(amount)` with `msg.sender = a`.",
-- "always-wd-all-many": "any user can always withdraw their whole balance entry in a finite sequence of transaction.",
-- "sum-wd-le-sum-dep": "for every user `a`, the sum of all `amount`s withdrawn by `a` is less or equal to the sum of all `amount`s deposited by `a`.",
-- "frontrun-one": "any transaction made by a user will have the same effect when frontrun by a single transaction made by a different user.",
-- "frontrun-many": "any transaction made by a user will have the same effect when frontrun by a finite sequence of transactions made by different users."
-- }

-- üè¶ Main Bank contract
template Bank
  with
    operator : Party
  where
    signatory operator

    -- üßæ Operator creates a UserBalance contract for a given user
    nonconsuming choice OpenAccount : ContractId UserBalance
      with
        user : Party
      controller operator
      do
        create UserBalance with
          bank = operator
          user = user
          balance = 0.0

-- üë§ User-specific balance contract
template UserBalance
  with
    bank : Party
    user : Party
    balance : Decimal
  where
    signatory bank
    observer user

    -- üí∞ Deposit funds (max 200 per deposit)
    choice Deposit : ContractId UserBalance
      with
        amount : Decimal
      controller user
      do
        assertMsg "Deposit must be less than 200" (amount < 200.0)
        create this with
          balance = balance + amount

    -- üèß Withdraw funds (max 100 per withdrawal, must not exceed balance)
    choice Withdraw : ContractId UserBalance
      with
        amount : Decimal
      controller user
      do
        assertMsg "Withdrawal must be > 0" (amount > 0.0)
        assertMsg "Cannot withdraw more than 100" (amount <= 100.0)
        assertMsg "Insufficient balance" (amount <= balance)
        create this with
          balance = balance - amount
    -- üìä User can check their balance
    nonconsuming choice GetBalance : Decimal
      controller user
      do return balance
