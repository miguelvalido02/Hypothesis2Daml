module TestDigitalLocker3 where

import Daml.Script
import DigitalLocker

{- 
  In every state transition, we ensure that unauthorized users cannot terminate the locker.
  1. The owner creates a DigitalLocker contract in the Requested state.
  2. The test fails when UploadDocuments succeeds:
-}

testDigitalLocker = script do
  -- ðŸŽ­ Allocate parties
  owner <- allocateParty "Owner"
  bankAgent <- allocateParty "BankAgent"
  thirdParty1 <- allocateParty "ThirdParty1"
  thirdParty2 <- allocateParty "ThirdParty2"

  -- Step 1: Owner creates the DigitalLocker (Requested state)
  locker <- submit owner do
    createCmd DigitalLocker with
      owner = owner
      bankAgent = bankAgent
      thirdParties = [thirdParty1, thirdParty2]
      currentAuthorizedUser = None
      lockerStatus = "Created"
      image = None
      lockerFriendlyName = "My Secure Locker"
      expirationDate = None
      lockerIdentifier = None
      intendedPurpose = None
      rejectionReason = None
      thirdPartyRequestor = None
      state = Requested

  -- Make sure that bank agent cannot upload documents due to the state
  
  submitMustFail bankAgent do
    exerciseCmd locker UploadDocuments with
      identifier = "Locker321"
      img = "Another Image"

  debug locker
